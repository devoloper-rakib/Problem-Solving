' use strict';
console.log('working...');

// task:  Write a JavaScript program to create an object with keys generated by running the provided function for each key. The object will have the same values as the provided object.

// Point :  solution 1 (1) Object.keys() (2) Object.fromEntries() (3) Array.prototype.map() (4) Array.prototype.reduce()

const createObject = (obj, fn) => {
	return Object.fromEntries(
		Object.keys(obj).map((key) => [key, fn(obj[key], key, obj)]),
	);
};

console.log(createObject({ a: 1, b: 2 }, (val, key) => key + val));
console.log(createObject({ a: 1, b: 2 }, (val, key) => val));

// Point : solution 2

const createObject2 = (obj, fn) => {
	return Object.keys(obj).reduce((acc, key) => {
		acc[key] = fn(obj[key], key, obj);
		return acc;
	}, {});
};

console.log(createObject2({ a: 1, b: 2 }, (val, key) => key + val));
console.log(createObject2({ a: 1, b: 2 }, (val, key) => val));

console.log('another problem...');

// task : Write a JavaScript program to map array values to an object using a function. The key-value pairs consist of the original value as the key and the mapped value.

// Point : solution 1 :

const mapObject = (arr, fn) => {
	return arr.reduce((acc, val, i) => {
		acc[val] = fn(val, i, arr);
		return acc;
	}, {});
};

console.log(mapObject([1, 2, 3], (a) => a * a));

// Point : solution 2 :

const mapObject2 = (arr, fn) => {
	return Object.fromEntries(arr.map((val, i) => [val, fn(val, i, arr)]));
};

console.log(mapObject2([1, 2, 3], (a) => a * a));

// POint : solution 3 :

const mapObject3 = (arr, fn) => {
	return {
		...arr.reduce((acc, val, i) => {
			acc[val] = fn(val, i, arr);
			return acc;
		}, {}),
	};
};

console.log(mapObject3([1, 2, 3], (a) => a * a));

// Point : solution 4 :

const mapObject4 = (arr, fn) => {
	return Object.apply(
		null,
		arr.map((val, i) => {
			return { [val]: fn(val, i, arr) };
		}),
	);
};

console.log(mapObject4([1, 2, 3], (a) => a * a));
          